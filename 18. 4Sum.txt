## 18. 4Sum
18. 4Sum [Array] [Hash Table] [Two Pointers] [Medium]

> Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
> Note: The solution set must not contain duplicate quadruplets.
> For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.
> A solution set is:
> [
>   [-1,  0, 0, 1],
>   [-2, -1, 1, 2],
>   [-2,  0, 0, 2]
> ]

### 题目
给定包含n个整数的数组S，请问S中是否有4个元素a，b，c，d，使得a+b+c+d=target? 找出数组中相加等于target的4个数的所有不同组合。
### 解法一
用一个哈希map先缓存两个数的和，时间复杂度$O(n^2)$，空间复杂度$O(n^2)$
### 代码一
``` C++
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        if (nums.size() < 4) return result;
        sort(nums.begin(), nums.end());
        unordered_map<int, vector<pair<int, int>>> cache;
        for (size_t a = 0; a < nums.size(); ++a) {
            for (size_t b = a + 1; b < nums.size(); ++b) {
                cache[nums[a] + nums[b]].push_back(make_pair(a, b));
            }
        }
        for (size_t c = 0; c < nums.size(); ++c) {
            for (size_t d = c + 1; d < nums.size(); ++d) {
                const int key = target - nums[c] - nums[d];
                if (cache.find(key) == cache.end()) continue;
                const auto &vec = cache[key];
                for (size_t k = 0; k < vec.size(); ++k) {
                    if (c <= vec[k].second) continue;
                    result.push_back({nums[vec[k].first],
                        nums[vec[k].second], nums[c], nums[d]});
                }
            }
        }
        sort(result.begin(), result.end());
        result.erase(unique(result.begin(), result.end()), result.end());
        return result;
    }
};
```
### 错误与改正
- 算法错误
```
for (size_t a = 0; a < nums.size(); ++a) {
    //for (size_t b = 0; b < nums.size(); ++b) { //初值错误，改为
      for (size_t b = a + 1; b < nums.size(); ++b) {
```

### 解法二
用一个哈希multimap先缓存两个数的和，时间复杂度$O(n^2)$，空间复杂度$O(n^2)$
### 代码二
``` C++
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        if (nums.size() < 4) return result;
        sort(nums.begin(), nums.end());
        unordered_multimap<int, pair<int, int>> cache;
        for (size_t i = 0; i < nums.size(); ++i) {
            for (size_t j = i + 1; j < nums.size(); ++j) {
                cache.insert(make_pair(nums[i] + nums[j], make_pair(i, j)));
            }
        }
        for (auto i = cache.begin(); i != cache.end(); ++i) {
            int x = target - i->first;
            auto range = cache.equal_range(x);
            for (auto j = range.first; j != range.second; ++j) {
                auto a = i->second.first;
                auto b = i->second.second;
                auto c = j->second.first;
                auto d = j->second.second;
                if (a != c && a != d && b != c && b != d) {
                    vector<int> vec = {nums[a], nums[b], nums[c], nums[d]};
                    sort(vec.begin(), vec.end());
                    result.push_back(vec);
                }
            }
        }
        sort(result.begin(), result.end());
        result.erase(unique(result.begin(), result.end()), result.end());
        return result;
    }
};
```

### 相关题目
1. Two Sum [Array] [Hash Table] [Easy]
15. 3Sum [Array] [Two Pointers] [Medium]
16. 3Sum Closest [Array] [Two Pointers] [Medium]
18. 4Sum [Array] [Hash Table] [Two Pointers] [Medium]
nters] [Medium]
-16. 3Sum Closest [Array] [Two Pointers] [Medium]
-18. 4Sum [Array] [Hash Table] [Two Pointers] [Medium]
